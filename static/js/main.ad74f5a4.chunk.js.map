{"version":3,"sources":["components/Nav/index.js","components/Jumbotron/index.js","components/cards/index.js","App.js","serviceWorker.js","index.js"],"names":["Nav","props","react_default","a","createElement","className","href","message","id","score","topScore","Jumbotron","Card","onClick","handleClick","data-clicked","clickStatus","src","image","alt","name","App","state","heroes","_this","hero","filter","shuffle","clicked","map","setState","console","log","array","j","temp","i","length","Math","floor","random","_this2","this","components_Nav","components_Jumbotron","cards","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad74f5a4.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Nav(props) {\n    return (\n        <div className=\"navbar-fixed\">\n            <nav>\n                <div className=\"nav-wrapper blue darken-4\">\n                    <a href=\"/\" className=\"brand-logo left text\">Clicky Game</a>\n                    <h5 className=\"brand-logo center text\">{props.message}</h5>\n                    <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n                        <li><h5 className=\"text\">Score:{props.score} | </h5></li>\n                        <li><h5 className=\"text\">Top Score: {props.topScore}</h5></li>\n                    </ul>\n                </div>\n            </nav>\n        </div>\n    )\n};\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Jumbotron(props) {\n    return (\n        <div className=\"banner\">\n            <div className=\"center text-box\">\n            <h1 className=\"text\">Clicky Game!</h1>\n            <p className=\"text\">Click on an image to earn points, but don't click on any more than once!</p>\n            </div>\n        </div>\n    )\n};\n\nexport default Jumbotron;","import React from 'react';\nimport \"./style.css\"\n\n\n\nconst Card = (props) => {\n    \n        return (\n            <div className=\"col m4 image-wrap center \">\n                <img onClick={() => props.handleClick(props.id)} data-clicked={props.clickStatus} className=\"character center z-depth-3 pulsed animated\" src={props.image} alt={props.name} />\n            </div>\n        )\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport Nav from \"./components/Nav\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Cards from \"./components/cards\";\nimport \"./style.css\";\nimport heroes from \"./heroes.json\";\n\nclass App extends Component {\n    state = {\n        heroes,\n        score: 0,\n        topScore: 0,\n        message:\"click any card to start\"\n    }\n\n\n    handleClick = (id) => {\n        let score = this.state.score\n        let topScore = this.state.topScore\n        let hero = this.state.heroes.filter( hero => hero.id === id)[0]\n\n        this.shuffle(heroes)\n\n        //if unclicked image is clicked\n        if(!hero.clicked){\n            hero.clicked = true;\n            console.log(hero);\n            score += 1;\n            if(score > topScore){\n                topScore = score\n            }\n            this.setState({score, topScore, heroes})\n            console.log(heroes)\n\n        }\n\n        //when duplicate is clicked\n        else{\n            this.state.heroes.map(hero => \n                 hero.clicked = false\n            )\n            score = 0\n            this.setState({\n                score,\n                heroes,\n                message:\"You Guessed Wrong, Press Any Hero To Play Again\"\n            })\n            console.log(heroes)\n\n        }\n\n\n    }\n\n    shuffle = (array) => {\n        let j, temp, i;\n        for (i = array.length - 1; i > 0; i--) {\n            j = Math.floor(Math.random() * (i + 1));\n            temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    }\n\n    render() {\n        return (\n            <div>\n                <Nav\n                    score={this.state.score}\n                    topScore={this.state.topScore}\n                    message={this.state.message}\n                />\n                <Jumbotron></Jumbotron>\n                <div className=\"container image-container\">\n                    {heroes.map(hero => {\n                        return <Cards\n                            id = {hero.id}\n                            key={hero.name}\n                            image={hero.image}\n                            clickStatus={hero.clicked}\n                            handleClick= {this.handleClick}\n                            \n                        />\n                    })}\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}